.data
	texto1: .asciiz "Insira um valor positivo:\n"
	texto2: .asciiz "O valor de Fibonacci é:\n"
.text
	
	li $v0, 4 		# carrega o código de imprimir string
	la $a0, texto1		# carrega o endereço da string a ser impressa em a0
	syscall			# chama o SO para realizar a operação

	
	li $v0, 5		# carrega o código de ler inteiro
	syscall			# chama o SO para realizar a operação
	
	
	move $a0, $v0		# atribui ao registrador de argumento $a0
	jal fibonacci		# chama a função fibonacci
	move $a1, $v0 		# Salva o valor de retorno em a1

		
	li $v0, 4		# carrega o código de imprimir string
	la $a0, texto2		# carrega o endereço da string a ser impressa em a0
	syscall			# chama o SO para realizar a operação

	
	li $v0, 1		# carrega o código de imprimir inteiro
	move $a0, $a1		# atrbui o valor do retorno da função para ser imprimido
	syscall			# chama o SO para realizar a operação

	
	li $v0, 10		# codigo referente ao fim do programa
	syscall			# chama o SO para realizar a operação


	fibonacci:
		addi $sp, $sp, -12		# Abri espaço na pilha para 3 registro
		sw $ra, 8($sp)			# Salva $ra na pilha
		sw $s0, 4($sp)			# Salva $s0 na pilha
		sw $s1, 0($sp)			# Salva $s1 na pilha
		move $s0, $a0			# $s0 recebe conteudo de $a0
		li $v0, 1 			# Retorna a condição de parada
		li $t0, 2			# $t0 = 2
		ble $s0, $t0, saidaFibonacci 	# checa se é menor ou igual a 2
		addi $a0, $s0, -1 		# Define os argumentos para chamada recrusiva para f(n-1)
		jal fibonacci
		
		move $s1, $v0 			# resultado de f(n-1) para s1
		addi $a0, $s0, -2 		# define os argumentos para a chamada recursiva para f(n-2)
		jal fibonacci			# retorna para fibonacci 
		
		add $v0, $s1, $v0 		# adiciona o resultado de f(n-1)
	
	saidaFibonacci:			
		lw $ra, 8($sp)			# restaura $ra da pilha
		lw $s0, 4($sp)			# restaura $s0 da pilha
		lw $s1, 0($sp)			# restaura $s1 da pilha
		addi $sp, $sp, 12		# restaura pronteiro da pilha
		jr $ra				# retorna pro procedimento que chamou
